/*
 * 
 * Copyright (c) 2007 Christian Leberfinger
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software 
 * is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml.Serialization;

namespace de.christianleberfinger.dotnet.pocketknife.configuration
{
    /// <summary>
    /// Class for storing configuration properties in XML files.
    /// All public (and serializable) properties of a class can be stored in an XML file automatically.<para/>
    /// You just have to derive your class from Configuration and pass the type of your class as type
    /// parameter, such as <c>public class Config : Configuration&lt;Config&gt;</c><para/>
    /// The settings are then available through the static property 'Settings', e.g.: 
    /// <c>Config.Settings.MyInteger</c><para/>
    /// To store the current settings in an XML file use the static method <c>Config.save()</c>.
    /// </summary>
    /// <example>
    /// <code>
    /// public class Config : Configuration&lt;Config&gt;
    /// {
    ///     int myInteger;
    ///     string myString;
    /// 
    ///     public string MyString
    ///     {
    ///         get { return myString; }
    ///         set { myString = value; }
    ///     }
    ///     
    ///     public int MyInteger
    ///     {
    ///         get { return myInteger; }
    ///         set { myInteger = value; }
    ///     }
    /// }
    /// </code>
    /// </example>
    /// <typeparam name="T">The class that contains the properties you want to store in an XML file.</typeparam>
    [Serializable]
    public class Configuration<T>
    {
        // statically stored settings object
        private static T settings = Activator.CreateInstance<T>();

        // file name that is generated by T's type name
        private static string filename = typeof(T).Name + ".xml";

        /// <summary>
        /// Returns the filename that is automatically created from the type name.
        /// When you call save() the settings will be stored to this file.
        /// </summary>
        public static string Filename
        {
            get { return Configuration<T>.filename; }
        }

        /// <summary>
        /// Static initialization. 
        /// If there's a config file for the type of settings, 
        /// the data specified in it is being loaded automatically.
        /// </summary>
        static Configuration()
        {
            load(); // loads settings automatically.
        }

        /// <summary>
        /// Gets or sets the properties of this configuration-object.
        /// </summary>
        public static T Settings
        {
            get { return settings; }
            set { settings = value; }
        }

        /// <summary>
        /// Tries to load a stored snapshot of the object from an XML file. 
        /// The filename is generated by using the name of the object's type.
        /// </summary>
        public static void load()
        {
            load(filename); // use automatically generated filename
        }

        /// <summary>
        /// Checks for the existence of the configuration file.
        /// </summary>
        /// <returns></returns>
        public static bool fileExists()
        {
            return File.Exists(filename);
        }

        /// <summary>
        /// Tries to load a snapshot of the object from the specified XML file.
        /// </summary>
        public static void load(string filename)
        {
            if (!File.Exists(filename))
            {
                return;
            }

            // deserialize the settings object
            StreamReader sr = null;
            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(T));
                sr = new StreamReader(filename);
                settings = (T)serializer.Deserialize(sr);
                sr.Close();
            }
            catch(Exception ex)
            {
                if (sr != null)
                {
                    try
                    {
                        sr.Close();
                    }
                    catch { }
                }
                settings = (T)Activator.CreateInstance(typeof(T));
               
                throw new Exception("Could not load Configuration from " + filename + ". Using default values.", ex);
            }
        }

        /// <summary>
        /// Resets the settings to the default values.
        /// </summary>
        public static void resetToDefault()
        {
            settings = Activator.CreateInstance<T>();
        }

        /// <summary>
        /// Create a "snapshot" of the object and store it in an XML-file.
        /// The filename is automatically created by using the object's type-name.
        /// </summary>
        public static void save()
        {
            save(filename); // use automatically generated filename
        }

        /// <summary>
        /// Create a "snapshot" of the object and store it in the XML-file 
        /// with the specified filename. For consistency reasons, all data will
        /// first be written to a temporary file. When the writing was successful,
        /// the temp file will be moved to the given filename. 
        /// An existing filename will be overwritten.
        /// </summary>
        /// <param name="filename">Name of the output file</param>
        public static void save(string filename)
        {
            StreamWriter sw = null;
            try
            {
                // serialize the settings object
                XmlSerializer serializer = new XmlSerializer(typeof(T));

                // get a temporary file
                string tempFile = Path.GetTempFileName();

                // write to temp file
                sw = new StreamWriter(tempFile, false, Encoding.UTF8);
                serializer.Serialize(sw, settings);
                sw.Close();
                sw = null;

                // copy tempfile to real filename
                File.Copy(tempFile, filename, true);
                File.Delete(tempFile);
            }
            catch (Exception e)
            {
                throw e;
            }
            finally
            {
                // close the stream writer
                if (sw != null)
                {
                    try
                    {
                        sw.Close();
                    }
                    catch { }
                }
            }
        }

    }
}
